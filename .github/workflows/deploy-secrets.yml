name: Deploy secrets

on:
  # push:
  #   branches:
  #     - master
  #   paths-ignore:
  #     - 'iac/**'
  workflow_dispatch:

env:
  REPO_DIR_PATH: /home/luddite478/blog

jobs:
  redeploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.DROPLET_SSH_KEY }}

    - name: Sync latest changes
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.HOST_IP }} << EOF
          cd "${{ env.REPO_DIR_PATH}}"
          git config --global --add safe.directory ${{ env.REPO_DIR_PATH}}
          git pull origin master
        EOF

    - name: Substitute Environment Variables in .server.env
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.HOST_IP }} << EOF
          cd "${{ env.REPO_DIR_PATH}}/server"
          
          # Read each line in the example file
          while IFS='=' read -r key value; do
            # Remove leading and trailing spaces
            key=\$(echo \$key | xargs)
            
            # Check if the key is not empty and doesn't start with a comment
            if [[ ! -z "\$key" && ! \$key =~ ^# ]]; then
              # Get the corresponding secret value from the environment
              secret_value=\${{ secrets[\$key] }}

              # If the secret exists, substitute it in the .server.env file
              if [[ ! -z "\$secret_value" ]]; then
                sed -i "s|\$key=.*|\$key=\$secret_value|g" ${{ env.REPO_DIR_PATH}}/server/.server.env
              fi
            fi
          done < ${{ env.REPO_DIR_PATH}}/server/.server.example.env
          
          # Ensure .server.env is saved on the server
          echo "Environment file .server.env created and updated with secrets."
        EOF

    - name: Stop and rerun Docker Compose
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.HOST_IP }} << EOF
          cd "${{ env.REPO_DIR_PATH}}"
          docker-compose down
          docker-compose up --build -d
        EOF

    # - name: Wait for site to be ready
    #   timeout-minutes: 3
    #   run: |
    #     echo "Waiting for site to be ready..."
    #     timeout=180 # 3 minutes
    #     while ! curl -s http://${{ secrets.HOST_IP }} > /dev/null; do
    #       sleep 10
    #       timeout=$((timeout-10))
    #       if [ "$timeout" -le 0 ]; then
    #         echo "Timed out waiting for site to respond."
    #         exit 1
    #       fi
    #     done
    #     echo "Site is up and responding."
